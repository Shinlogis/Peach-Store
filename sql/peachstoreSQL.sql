USE ELECTRONICMALL;
-- 부모부터 순서로 DELETE 되도록 순서 맞춰서 수정 해주세요
-- CREATE INSERT 전부 DROP순서랑 맞추어 놓았으니 찾을 일 있으면 참고하세요
DROP TABLE IF EXISTS review_img; -- 리뷰 이미지
DROP TABLE IF EXISTS review; -- 리뷰
DROP TABLE IF EXISTS order_detail; -- 주문상세
DROP TABLE IF EXISTS cart_item; -- 장바구니 제품
DROP TABLE IF EXISTS custom_option; -- 제품 커스텀
DROP TABLE IF EXISTS toss_payment; -- 토스 결제 정보
DROP TABLE IF EXISTS order_receipt; -- 주문내역
DROP TABLE IF EXISTS inquiry_img; -- 문의 이미지
DROP TABLE IF EXISTS snapshot; -- 스냅샷
DROP TABLE IF EXISTS product_img; -- 제품 이미지
DROP TABLE IF EXISTS product_size; -- 제품 사이즈
DROP TABLE IF EXISTS product_color; -- 제품 색상
DROP TABLE IF EXISTS product_capacity; -- 제품 용량
DROP TABLE IF EXISTS inquiry; -- 문의
DROP TABLE IF EXISTS cart; -- 장바구니
DROP TABLE IF EXISTS product; -- 제품
DROP TABLE IF EXISTS user; -- 회원
DROP TABLE IF EXISTS product_subcategory; -- 제품 서브 카테고리
DROP TABLE IF EXISTS grade_coupon; -- 등급별 쿠폰
DROP TABLE IF EXISTS user_grade; -- 회원 등급
DROP TABLE IF EXISTS admin; -- 관리자
DROP TABLE IF EXISTS size; -- 사이즈
DROP TABLE IF EXISTS color; -- 색상
DROP TABLE IF EXISTS capacity; -- 용량
DROP TABLE IF EXISTS product_engraving; -- 제품 각인
DROP TABLE IF EXISTS product_topcategory; -- 제품 상위 카테고리
DROP TABLE IF EXISTS coupon; -- 쿠폰
DROP TABLE IF EXISTS sns_provider; -- snsprovider

-- 관리자 테이블 생성(CREATE TABLE admin)
CREATE TABLE admin (
	admin_id INT PRIMARY KEY AUTO_INCREMENT,
	email VARCHAR(100) NOT NULL UNIQUE,
	password VARCHAR(100) NOT NULL,
	salt VARCHAR(100) NOT NULL, 
	admin_name VARCHAR(100) NOT NULL,
	role VARCHAR(10) NOT NULL DEFAULT 'admin' CHECK(role IN ('super', 'admin')),
	is_active BOOLEAN NOT NULL DEFAULT TRUE
);

-- snsprovider 테이블 생성(CREATE TABLE sns_provider)
CREATE TABLE sns_provider(
	sns_provider_id int PRIMARY KEY auto_increment
	, provider_name varchar(12) NOT NULL UNIQUE
);

-- 회원 등급 테이블 생성 (조건 기준 추가)(CREATE TABLE USER_GRADE)
CREATE TABLE USER_GRADE (
	USER_GRADE_ID INT AUTO_INCREMENT PRIMARY KEY,
	USER_GRADE_NAME VARCHAR(50) NOT NULL,
	DISCOUNT_RATE DECIMAL(5,2) NOT NULL,
	CRITERIA_AMOUNT INT NOT NULL, -- 등급 부여 기준 금액 예: 누적 구매금액
	IS_ACTIVE BOOLEAN NOT NULL DEFAULT TRUE
);

-- 회원 테이블 생성(CREATE TABLE user)
CREATE TABLE user(
	user_id int PRIMARY KEY AUTO_INCREMENT
	, id varchar(100) NOT NULL UNIQUE
	, email varchar(100) NOT NULL UNIQUE
	, salt varchar(100) 
	, hashedpassword varchar(100) 
	, user_name varchar(10) NOT NULL 
	, tel varchar(13) UNIQUE
	, address varchar(255)
	, is_active boolean  NOT NULL DEFAULT TRUE
	, created_at datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
	, user_grade_id int NOT NULL DEFAULT 1
	, sns_provider_id int
	, CONSTRAINT fk_user_user_grade_id
		FOREIGN KEY (user_grade_id)
		REFERENCES user_grade(user_grade_id)
	, CONSTRAINT fk_user_sns_provider_id
		FOREIGN KEY (sns_provider_id)
		REFERENCES sns_provider(sns_provider_id)
);

-- 장바구니 테이블 생성(CREATE TABLE CART)
CREATE TABLE CART(
	CART_ID INT PRIMARY KEY AUTO_INCREMENT
	, USER_ID INT NOT NULL UNIQUE
	, CONSTRAINT FK_CART_USER_ID
		FOREIGN KEY (USER_ID)
		REFERENCES USER(USER_ID)
);

-- 문의 테이블 생성(CREATE TABLE INQUIRY)
CREATE TABLE INQUIRY(
	INQUIRY_ID INT PRIMARY KEY AUTO_INCREMENT
	, TITLE VARCHAR(100) NOT NULL
	, INQUIRY_TEXT VARCHAR(200) NOT NULL
	, CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
	, ANSWER_TEXT VARCHAR(200) 
	, ANSWERED_AT TIMESTAMP DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP
	, IS_ACTIVE BOOLEAN NOT NULL DEFAULT TRUE
	, USER_ID INT NOT NULL
	, ADMIN_ID INT
	, CONSTRAINT FK_INQUIRY_USER_ID
		FOREIGN KEY (USER_ID)
		REFERENCES USER(USER_ID)
	, CONSTRAINT FK_INQUIRY_ADMIN_ID
		FOREIGN KEY (ADMIN_ID)
		REFERENCES ADMIN(ADMIN_ID)
);

-- 문의 이미지 테이블 생성(CREATE TABLE INQUIRY_IMG)
-- 문의 이미지는 더미데이터 생성하지 않았음
CREATE TABLE INQUIRY_IMG(
	INQUIRY_IMG_ID INT PRIMARY KEY AUTO_INCREMENT
	, FILENAME VARCHAR(100) NOT NULL
	, INQUIRY_ID INT NOT NULL
	, CONSTRAINT FK_INQUIRY_IMG_INQUIRY_ID
		FOREIGN KEY (INQUIRY_ID)
		REFERENCES INQUIRY(INQUIRY_ID)
);

-- 사이즈 테이블 생성(CREATE TABLE size)
CREATE TABLE size(
	size_id int PRIMARY KEY AUTO_INCREMENT
	, size_name varchar(100) NOT NULL
);

-- 컬러 테이블 생성(CREATE TABLE color)
CREATE TABLE color(
	color_id int PRIMARY KEY AUTO_INCREMENT
	, color_name varchar(100) NOT NULL
	,color_value varchar(100)
);

-- 용량 수치 테이블 생성(CREATE TABLE capacity)
CREATE TABLE capacity(
	capacity_id int PRIMARY KEY AUTO_INCREMENT
	, capacity_name varchar(100) NOT NULL
);

-- 제품 각인 테이블 생성(CREATE TABLE product_engraving)
CREATE TABLE product_engraving(
	product_engraving_id int PRIMARY KEY AUTO_INCREMENT
	, engraving_price int NOT NULL CHECK(engraving_price >= 0)
	, engraving_text varchar(10) NOT NULL
);

-- 제품 상위 카테고리 테이블 생성(CREATE TABLE PRODUCT_TOPCATEGORY)
CREATE TABLE PRODUCT_TOPCATEGORY(
	PRODUCT_TOPCATEGORY_ID INT PRIMARY KEY AUTO_INCREMENT
	, PRODUCT_TOPCATEGORY_NAME VARCHAR(100) NOT NULL
	, FILEDIRNAME VARCHAR(30) DEFAULT NULL
	, FILENAME VARCHAR(30)
	, IS_ACTIVE BOOLEAN NOT NULL DEFAULT TRUE
);

-- 제품 하위 카테고리 테이블 생성(CREATE TABLE PRODUCT_SUBCATEGORY)
CREATE TABLE PRODUCT_SUBCATEGORY(
	PRODUCT_SUBCATEGORY_ID INT PRIMARY KEY AUTO_INCREMENT
	, PRODUCT_SUBCATEGORY_NAME VARCHAR(100) NOT NULL
	, PRODUCT_TOPCATEGORY_ID INT NOT NULL
	, FILEDIRNAME VARCHAR(30) DEFAULT NULL
	, FILENAME VARCHAR(30)
	, IS_ACTIVE BOOLEAN NOT NULL DEFAULT TRUE
	, CONSTRAINT FK_PRODUCT_TOPCATEGORY_ID
		FOREIGN KEY (PRODUCT_TOPCATEGORY_ID)
		REFERENCES PRODUCT_TOPCATEGORY(PRODUCT_TOPCATEGORY_ID)
);

-- 제품 테이블 생성(CREATE TABLE product)
CREATE TABLE product(
	product_id int PRIMARY KEY AUTO_INCREMENT
	, is_deleted BOOLEAN DEFAULT FALSE
	, product_code varchar(100) NOT NULL
	, product_name varchar(100) NOT NULL
	, price int NOT NULL
	, introduce varchar(100) NOT NULL
	, detail LongText NOT NULL
	, product_subcategory_id int
	, CONSTRAINT fk_product_product_subcategory_id
		FOREIGN KEY (product_subcategory_id)
		REFERENCES product_subcategory(product_subcategory_id)
);

-- 제품 사이즈 테이블 생성(CREATE TABLE PRODUCT_SIZE)
CREATE TABLE PRODUCT_SIZE(
	PRODUCT_SIZE_ID INT PRIMARY KEY AUTO_INCREMENT
	, ADDITIONAL_PRICE INT NOT NULL DEFAULT 0
	, SIZE_ID INT NOT NULL
	, PRODUCT_ID INT NOT NULL
	, CONSTRAINT FK_PRODUCT_SIZE_SIZE_ID
		FOREIGN KEY (SIZE_ID)
		REFERENCES SIZE(SIZE_ID)
	, CONSTRAINT FK_PRODUCT_SIZE_PRODUCT_ID
		FOREIGN KEY (PRODUCT_ID)
		REFERENCES PRODUCT(PRODUCT_ID)
);

-- 제품 색상 테이블 생성(CREATE TABLE PRODUCT_COLOR)
CREATE TABLE PRODUCT_COLOR(
	PRODUCT_COLOR_ID INT PRIMARY KEY AUTO_INCREMENT
	, COLOR_ID INT NOT NULL
	, PRODUCT_ID INT NOT NULL
	, CONSTRAINT FK_PRODUCT_COLOR_COLOR_ID
		FOREIGN KEY (COLOR_ID)
		REFERENCES COLOR(COLOR_ID)
	, CONSTRAINT FK_PRODUCT_COLOR_PRODUCT_ID
		FOREIGN KEY (PRODUCT_ID)
		REFERENCES PRODUCT(PRODUCT_ID)
);

-- 제품 용량 테이블 생성(CREATE TABLE PRODUCT_CAPACITY)
CREATE TABLE PRODUCT_CAPACITY(
	PRODUCT_CAPACITY_ID INT PRIMARY KEY AUTO_INCREMENT
	, ADDITIONAL_PRICE INT NOT NULL DEFAULT 0
	, CAPACITY_ID INT NOT NULL
	, PRODUCT_ID INT NOT NULL
	, CONSTRAINT FK_PRODUCT_CAPACITY_CAPACITY_ID
		FOREIGN KEY (CAPACITY_ID)
		REFERENCES CAPACITY(CAPACITY_ID)
	, CONSTRAINT FK_PRODUCT_CAPACITY_PRODUCT_ID
		FOREIGN KEY (PRODUCT_ID)
		REFERENCES PRODUCT(PRODUCT_ID)
);

-- 제품 이미지 테이블 생성(CREATE TABLE PRODUCT_IMG)
-- 제품 이미지는 더미데이터 생성하지 않았음
CREATE TABLE PRODUCT_IMG(
	PRODUCT_IMG_ID INT PRIMARY KEY AUTO_INCREMENT
	, FILENAME VARCHAR(30) NOT NULL
	, PRODUCT_ID INT NOT NULL
	, CONSTRAINT FK_PRODUCT_IMG_PRODUCT_ID
		FOREIGN KEY (PRODUCT_ID)
		REFERENCES PRODUCT(PRODUCT_ID)
);

-- 제품 커스텀 옵션 테이블 생성(CREATE TABLE CUSTOM_OPTION)
CREATE TABLE CUSTOM_OPTION(
	CUSTOM_OPTION_ID INT PRIMARY KEY AUTO_INCREMENT
	, PRODUCT_SIZE_ID INT  
	, PRODUCT_COLOR_ID INT  
	, PRODUCT_CAPACITY_ID INT 
	, PRODUCT_ENGRAVING_ID INT
	, CONSTRAINT FK_CUSTOM_OPTION_PRODUCT_SIZE_ID
		FOREIGN KEY (PRODUCT_SIZE_ID)
		REFERENCES PRODUCT_SIZE(PRODUCT_SIZE_ID)
	, CONSTRAINT FK_CUSTOM_OPTION_PRODUCT_COLOR_ID
		FOREIGN KEY (PRODUCT_COLOR_ID)
		REFERENCES PRODUCT_COLOR(PRODUCT_COLOR_ID)
	, CONSTRAINT FK_CUSTOM_OPTION_PRODUCT_CAPACITY_ID
		FOREIGN KEY (PRODUCT_CAPACITY_ID)
		REFERENCES PRODUCT_CAPACITY(PRODUCT_CAPACITY_ID)
	, CONSTRAINT FK_CUSTOM_OPTION_PRODUCT_ENGRAVING_ID
		FOREIGN KEY (PRODUCT_ENGRAVING_ID)
		REFERENCES PRODUCT_ENGRAVING(PRODUCT_ENGRAVING_ID)
);

-- 장바구니 제품 테이블 생성(CREATE TABLE CART_ITEM)
CREATE TABLE CART_ITEM(
	CART_ITEM_ID INT PRIMARY KEY AUTO_INCREMENT
	, QUANTITY INT NOT NULL DEFAULT 1 CHECK(QUANTITY >= 1)
	, CART_ID INT NOT NULL
	, PRODUCT_ID INT NOT NULL
	, CUSTOM_OPTION_ID INT
	, CONSTRAINT FK_CART_ITEM_CART_ID
		FOREIGN KEY (CART_ID)
		REFERENCES CART(CART_ID)
	, CONSTRAINT FK_CART_ITEM_PRODUCT_ID
		FOREIGN KEY (PRODUCT_ID)
		REFERENCES PRODUCT(PRODUCT_ID)
	, CONSTRAINT FK_CART_ITEM_CUSTOM_OPTION_ID
		FOREIGN KEY (CUSTOM_OPTION_ID)
		REFERENCES CUSTOM_OPTION(CUSTOM_OPTION_ID)
);

-- 제품 스냅샷 테이블 생성(create table snapshot)
CREATE TABLE snapshot(
	snapshot_id int PRIMARY KEY AUTO_INCREMENT
	, product_id int NOT NULL
	, product_name varchar(100) NOT NULL
	, price int NOT NULL
	, size varchar(100)
	, capacity varchar(100)
	, color varchar(100)
	, engraving varchar(100)
	, filename varchar(100) NOT NULL
	, order_quantity int NOT NULL DEFAULT 1
);

-- 토스 결제 정보 테이블
CREATE TABLE toss_payment (
	payment_id BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	toss_order_id VARCHAR(255) NOT NULL,
	toss_payment_key VARCHAR(255) NOT NULL UNIQUE,
	toss_payment_method VARCHAR(255) NOT NULL,
	toss_payment_status VARCHAR(255) NOT NULL,
	total_amount BIGINT NOT NULL,
	approved_at DATETIME(6) DEFAULT NULL,
	requested_at DATETIME(6) NOT NULL
);

-- 주문내역 테이블(CREATE TABLE order_receipt)
CREATE TABLE order_receipt(
	order_receipt_id int PRIMARY KEY AUTO_INCREMENT
	, orderdate datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
	, order_status varchar(10) NOT NULL DEFAULT '상품 준비 전' CHECK(order_status IN ('상품 준비 전', '상품 준비 중', '발송완료', '주문취소'))
	, user_id int NOT NULL
	, payment_id BIGINT NOT NULL
	, postcode int NOT NULL
	, address varchar(45) NOT NULL
	, detail_address varchar(45) NOT NULL
	, CONSTRAINT fk_order_receipt_user_id
		FOREIGN KEY (user_id)
		REFERENCES user(user_id)
	, CONSTRAINT fk_order_receipt_payment_id
		FOREIGN KEY (payment_id)
		REFERENCES toss_payment(payment_id)
);

-- 주문상세 테이블 생성(CREATE TABLE order_detail)
CREATE TABLE order_detail(
	order_detail_id int PRIMARY KEY AUTO_INCREMENT
	, order_receipt_id int NOT NULL
	, snapshot_id int NOT NULL UNIQUE
	, CONSTRAINT fk_order_detail_order_receipt_id
		FOREIGN KEY (order_receipt_id)
		REFERENCES order_receipt(order_receipt_id)
	, CONSTRAINT fk_order_detail_snapshot_id
		FOREIGN KEY (snapshot_id)
		REFERENCES snapshot(snapshot_id)
);

-- 쿠폰 테이블 생성 (변경 없음)(CREATE TABLE COUPON)
CREATE TABLE COUPON (
	COUPON_ID INT AUTO_INCREMENT PRIMARY KEY,
	COUPON_NAME VARCHAR(50) NOT NULL,
	DISCOUNT_AMOUNT INT NOT NULL,
	VALID_DAYS INT NOT NULL,
	USE_CONDITION VARCHAR(100),
	IS_ACTIVE BOOLEAN NOT NULL DEFAULT TRUE
);

-- 리뷰 테이블 생성(CREATE TABLE review)
CREATE TABLE review(
	review_id int PRIMARY KEY AUTO_INCREMENT
	, content text NOT NULL
	, regdate datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
	, status varchar(10) NOT NULL CHECK(status in('활성', '숨김'))
	, user_id int NOT NULL
	, order_detail_id int NOT NULL
	, CONSTRAINT fk_review_user_id
		FOREIGN KEY (user_id)
		REFERENCES user(user_id)
	, CONSTRAINT fk_review_order_detail_id
		FOREIGN KEY (order_detail_id)
		REFERENCES order_detail(order_detail_id)
);

-- 리뷰 이미지 테이블 생성(CREATE TABLE REVIEW_IMG)
-- 리뷰 이미지는 더미데이터 생성하지 않았음
CREATE TABLE REVIEW_IMG(
	REVIEW_IMG_ID INT PRIMARY KEY AUTO_INCREMENT
	, FILENAME VARCHAR(200) NOT NULL
	, REVIEW_ID INT NOT NULL
	, CONSTRAINT FK_REVIEW_IMG_REVIEW_ID
		FOREIGN KEY (REVIEW_ID)
		REFERENCES REVIEW(REVIEW_ID)
);

-- 등급 쿠폰 테이블 (변경 없음)(CREATE TABLE GRADE_COUPON)
CREATE TABLE GRADE_COUPON (
	GRADE_COUPON_ID INT AUTO_INCREMENT PRIMARY KEY
	, USER_GRADE_ID INT NOT NULL
	, COUPON_ID INT NOT NULL
	, ISSUE_RULE VARCHAR(100)
	, IS_ACTIVE BOOLEAN NOT NULL DEFAULT TRUE
	, CONSTRAINT FK_GRADE_COUPON_USER_GRADE_ID
		FOREIGN KEY (USER_GRADE_ID)
		REFERENCES USER_GRADE(USER_GRADE_ID)
	, CONSTRAINT FK_GRADE_COUPON_COUPON_ID
		FOREIGN KEY (COUPON_ID)
		REFERENCES COUPON(COUPON_ID)
);

-- ------인서트시작-------------------------------------------------

-- 사이즈 테이블 인서트 (INSERT INTO SIZE)
INSERT INTO SIZE (SIZE_NAME) VALUES ('Basic');
INSERT INTO SIZE (SIZE_NAME) VALUES ('Pro');
INSERT INTO SIZE (SIZE_NAME) VALUES ('ProMax');
INSERT INTO SIZE (SIZE_NAME) VALUES ('13인치');
INSERT INTO SIZE (SIZE_NAME) VALUES ('17인치');
INSERT INTO SIZE (SIZE_NAME) VALUES ('11');
INSERT INTO SIZE (SIZE_NAME) VALUES ('13');

-- 색상 테이블 인서트 (INSERT INTO COLOR)
INSERT INTO COLOR (COLOR_NAME,color_value) VALUES ('스페이스 블랙','#2C2C2E ');
INSERT INTO COLOR (COLOR_NAME,color_value) VALUES ('실버','#C0C0C0');
INSERT INTO COLOR (COLOR_NAME,color_value) VALUES ('울트라 마린','#120A8F');
INSERT INTO COLOR (COLOR_NAME,color_value) VALUES ('블랙','black');
INSERT INTO COLOR (COLOR_NAME,color_value) VALUES ('핑크','pink');
INSERT INTO COLOR (COLOR_NAME,color_value) VALUES ('옐로우','yellow');
INSERT INTO COLOR (COLOR_NAME,color_value) VALUES ('그린','#90EE90');
INSERT INTO COLOR (COLOR_NAME,color_value) VALUES ('기본','#FFFFF0');

-- 용량 테이블 인서트 (INSERT INTO CAPACITY)
INSERT INTO CAPACITY (CAPACITY_NAME) VALUES ('기본');
INSERT INTO CAPACITY (CAPACITY_NAME) VALUES ('128GB');
INSERT INTO CAPACITY (CAPACITY_NAME) VALUES ('256GB');
INSERT INTO CAPACITY (CAPACITY_NAME) VALUES ('516GB');
INSERT INTO CAPACITY (CAPACITY_NAME) VALUES ('1TB');

-- 제품 각인 테이블 인서트(INSERT INTO PRODUCT_ENGRAVING)
INSERT INTO PRODUCT_ENGRAVING (ENGRAVING_PRICE, ENGRAVING_TEXT)
VALUES
	(1000, '각인입니다1'),
	(1500, '각인입니다2'),
	(2000, '각인입니다3'),
	(2500, '각인입니다4'),
	(3000, '각인입니다5');

-- 제품 상위 카테고리 테이블 인서트(INSERT INTO PRODUCT_TOPCATEGORY)
INSERT INTO PRODUCT_TOPCATEGORY (PRODUCT_TOPCATEGORY_NAME, IS_ACTIVE)
VALUES
	('pPhone', true),
	('pPad', true),
	('pMac', true),
	('accessory', true);

-- SNSPROVIDER 테이블 인서트(INSERT INTO SNS_PROVIDER)
INSERT INTO SNS_PROVIDER(PROVIDER_NAME) VALUES('GOOGLE');
INSERT INTO SNS_PROVIDER(PROVIDER_NAME) VALUES('NAVER');
INSERT INTO SNS_PROVIDER(PROVIDER_NAME) VALUES('KAKAO');

-- 회원 등급 테이블 인서트(INSERT INTO USER_GRADE)
INSERT INTO USER_GRADE (USER_GRADE_NAME, DISCOUNT_RATE, CRITERIA_AMOUNT)
VALUES 
	('Bronze', 0.00, 0),
	('Silver', 2.00, 100000),
	('Gold', 5.00, 300000),
	('Platinum', 10.00, 700000);
INSERT INTO user_grade (user_grade_name, discount_rate, criteria_amount, is_active)
VALUES ('zz', 12.00, 9999, false);

-- 관리자 테이블 인서트 (INSERT INTO ADMIN)
INSERT INTO ADMIN (EMAIL, PASSWORD, salt, ADMIN_NAME, ROLE)
VALUES ('SUPER@ADMIN.COM', 'SUPERPASS123', '1', '김수현', 'SUPER');

INSERT INTO ADMIN (EMAIL, PASSWORD, salt, ADMIN_NAME, ROLE)
VALUES ('ADMIN1@EXAMPLE.COM', 'ADMINPASS1', '1', '이정민', 'ADMIN');

INSERT INTO ADMIN (EMAIL, PASSWORD, salt, ADMIN_NAME, ROLE)
VALUES ('ADMIN2@EXAMPLE.COM', 'ADMINPASS2', '1', '박지은', 'ADMIN');

-- 쿠폰 테이블 인서트(INSERT INTO COUPON)
INSERT INTO COUPON (COUPON_NAME, DISCOUNT_AMOUNT, VALID_DAYS, USE_CONDITION)
VALUES 
	('WELCOME10', 10000, 30, '신규 가입 시 사용 가능'),
	('OVER100K', 15000, 15, '10만원 이상 구매 시'),
	('LOYALTY20', 20000, 20, 'GOLD 등급 전용'),
	('SUPERPLATINUM', 30000, 10, 'PLATINUM 등급 전용');

-- 제품 서브카테고리 테이블 인서트(INSERT INTO PRODUCT_SUBPCATEGORY)
INSERT INTO PRODUCT_SUBCATEGORY (PRODUCT_SUBCATEGORY_NAME, PRODUCT_TOPCATEGORY_ID)
VALUES
   ('15시리즈', 1), ('16시리즈', 1),
   ('Air', 2), ('Mini', 2), ('Pro', 2),
   ('노트북', 3), ('데스크탑', 3), ('디스플레이', 3),
   ('마우스&키보드', 4), ('케이스&보호장비', 4), ('충전필수템', 4),('헤드폰&스피커', 4),('magsafe', 4),('저장장치', 4),('홈오피스', 4);

-- 회원 테이블 인서트(INSERT INTO user)
INSERT INTO user (id, email, salt, hashedpassword, user_name, tel, address, user_grade_id, sns_provider_id)
VALUES 
	('user01', 'user01@example.com', 'Z9Lt1yJH', 'a7ac998258a4bc8e74e0f693c7d07b3721d1b1c51a1c586af2577d558acdb45f', '홍길동', '010-1234-0001', '서울시 강남구', 1, NULL),
	('user02', 'user02@example.com', 'PlkM5sAv', 'f6499cf282165ad79395cf3843172db3999f36ce215b5090d1ed7a4e14f842bb', '김영희', '010-1234-0002', '서울시 서초구', 2, NULL),
	('user03', 'user03@example.com', 's8Xe4FVr', '67f52f14f6f9fd02923b94a5182635b38e80229f2dfb95e9f1c4a4bcd9aeaad3', '박철수', '010-1234-0003', '서울시 송파구', 3, NULL);

-- 등급 쿠폰 테이블 인서트(INSERT INTO GRADE_COUPON)
INSERT INTO GRADE_COUPON (USER_GRADE_ID, COUPON_ID, ISSUE_RULE)
VALUES 
	(1, 1, '가입 시 자동 발급'),
	(2, 2, 'SILVER 등급 도달 시 발급'),
	(3, 3, 'GOLD 등급 도달 시 발급'),
	(4, 4, 'PLATINUM 등급 도달 시 발급');

-- 제품 테이블 인서트(INSERT INTO PRODUCT) - 하나만
INSERT INTO PRODUCT (PRODUCT_CODE, PRODUCT_NAME, PRICE, INTRODUCE, DETAIL, PRODUCT_SUBCATEGORY_ID)
VALUES ('P14P-BLK', 'pPhone 15 Pro 블랙', 1350000, '고성능 스마트폰', '6.1인치 디스플레이 / A16 Bionic', 1);

-- 장바구니 테이블 인서트(INSERT INTO CART)
INSERT INTO CART (USER_ID) VALUES (1);
INSERT INTO CART (USER_ID) VALUES (2);
INSERT INTO CART (USER_ID) VALUES (3);

-- 문의 테이블 인서트(INSERT INTO INQUIRY)
INSERT INTO INQUIRY (TITLE, INQUIRY_TEXT, USER_ID) 
VALUES ('배송 문의', '언제 배송되나요?', 1);

-- 제품 사이즈 테이블 인서트(INSERT INTO PRODUCT_SIZE) - 상품 1개에 대한 옵션들
INSERT INTO PRODUCT_SIZE (ADDITIONAL_PRICE, SIZE_ID, PRODUCT_ID)
VALUES (0, 1, 1);

-- 제품 색상 테이블 인서트(INSERT INTO PRODUCT_COLOR) - 상품 1개에 대한 옵션들
INSERT INTO PRODUCT_COLOR (COLOR_ID, PRODUCT_ID)
VALUES (1, 1);

-- 제품 용량 테이블 인서트(INSERT INTO PRODUCT_CAPACITY) - 상품 1개에 대한 옵션들
INSERT INTO PRODUCT_CAPACITY (ADDITIONAL_PRICE, CAPACITY_ID, PRODUCT_ID)
VALUES (0, 1, 1);

-- 제품 이미지 테이블 인서트 (하나의 이미지만)
INSERT INTO PRODUCT_IMG (FILENAME, PRODUCT_ID)
VALUES ('sample_phone.jpg', 1);

-- 제품 커스텀 옵션 테이블 인서트(INSERT INTO CUSTOM_OPTION)
INSERT INTO CUSTOM_OPTION (PRODUCT_SIZE_ID, PRODUCT_COLOR_ID, PRODUCT_CAPACITY_ID, PRODUCT_ENGRAVING_ID)
VALUES (1, 1, 1, NULL);

-- 스냅샷 테이블 인서트(INSERT INTO SNAPSHOT)
INSERT INTO SNAPSHOT (PRODUCT_ID, PRODUCT_NAME, PRICE, SIZE, CAPACITY, COLOR, ENGRAVING, FILENAME)
VALUES (1, 'pPhone 14 Pro 블랙', 1350000, 'Pro', '기본', '스페이스 블랙', NULL, 'A7F3XBQ9');

-- 결제정보 테이블 인서트
INSERT INTO toss_payment (
	payment_id, toss_payment_key, toss_order_id, total_amount, 
	toss_payment_method, toss_payment_status, requested_at, approved_at
) VALUES
(1, 'pay_key_001', 'order_001', 1350000, '카드', 'DONE', NOW(), NOW());

-- 주문내역 테이블 인서트(INSERT INTO ORDER_RECEIPT)
INSERT INTO ORDER_RECEIPT (ORDER_STATUS, USER_ID, payment_id, postcode, address, detail_address)
VALUES ('상품 준비 전', 1, 1, 12345, "주소주소", "상세주소");

-- 주문상세 테이블 인서트(INSERT INTO ORDER_DETAIL)
INSERT INTO ORDER_DETAIL (ORDER_RECEIPT_ID, SNAPSHOT_ID)
VALUES (1, 1);

-- 리뷰 테이블 인서트 (INSERT INTO review)
INSERT INTO review (content, status, user_id, order_detail_id)
VALUES ('정말 마음에 들어요! 배송도 빨랐어요.', '활성', 1, 1);

-- 관리자계정 insert
INSERT INTO admin (email, password, salt, admin_name, role, is_active)
VALUES (
	'admin',
	'F0uSWIMVk+9lQB8zW/8IbLNSgnoTvz3KTGgvz8h9he8=',
	'QrJRDMLxoc5kaa4Z8WCJ1g==',
	'관리자',
	'super',
	TRUE
);
select 